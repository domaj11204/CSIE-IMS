"""
自動測試所有API
"""
import requests
import asyncio
import pytest
from modules.utils import call_api
from modules.test_utils import remove_uuids
pytest_plugins = ('pytest_asyncio',)

# 基本讀取資料測試
@pytest.mark.asyncio
async def test_get_data():
    test_uuid = "01ed9ce2-6bab-43a1-bccd-432298719331"
    
    uuids = (await call_api("v1/knowledge_base/uuids", "get", params={"source": "rdf"}))["uuids"]
    assert test_uuid in uuids
    
    # info = (await call_api("v1/knowledge_base/{test_uuid}", "get"))["info"]
    
    split_result = (await call_api("v1/rdf/split", "post",))
    response = await call_api("v1/knowledge_base/{test_uuid}", "info")
    response = await call_api("v1/rdf/data/{test_uuid}", "get")
    response = await call_api("v1/rag/query", "post", {"source_list":["obsidian"], "type_list": [], "query":"FastAPI使用哪個port?"})
    bot_message = (await call_api("v1/rag/reference_synthesis", "post", data=response))
    assert "27711" in response["answer_text"]
    assert "參考筆記" in bot_message["result"]
    assert "參考摘錄" not in bot_message["result"]
    response = await call_api("v1/rag/query", "post", {"source_list":[], "type_list": ["測試用筆記"], "query":"FastAPI使用哪個port?"})
    bot_message = (await call_api("v1/rag/reference_synthesis", "post", data=response))
    assert "27711" in response["answer_text"]
    assert "參考筆記" in bot_message["result"]
    assert "參考摘錄" not in bot_message["result"]

#切chunk測試
@pytest.mark.asyncio
async def test_split_data():
    uuid = "01ed9ce2-6bab-43a1-bccd-432298719331"
    entity = (await call_api(f"/v1/knowledge_base/entity/{uuid}", "GET"))["entity"]
    split_data = (await call_api("v1/rdf/split", "post", 
                                    data={"entity":entity, "chunk_size":1024}))["split_result"]
    split_data[0] = remove_uuids(split_data[0])
    excepted_split_result0 = {'entity': 
        {'name': 'tcm_owl_0', 
         'description': 'tcm_owl_0', 
         'uuid': '43674b56-c7de-44aa-9870-e5e6a7f6e06d', 
         'data_hash': 'a0a81729b4b70fea60ba3c0fb4589a88', 
         'relation': [{'uuid1': '43674b56-c7de-44aa-9870-e5e6a7f6e06d', 
                       'uuid2': '01ed9ce2-6bab-43a1-bccd-432298719331', 
                       'relation': '屬於', 
                       'properties': {'chunk_size': 1024}}], 
         'type': 'chunk'}, 
        'document': '<?xml version="1.0"?>\n<rdf:RDF xmlns="http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#"\n     xml:base="http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2"\n     xmlns:ont="http://www.co-ode.org/ontologies/ont.owl#"\n     xmlns:owl="http://www.w3.org/2002/07/owl#"\n     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n     xmlns:xml="http://www.w3.org/XML/1998/namespace"\n     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"\n     xmlns:owl2="http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#owl:"\n     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"\n     xmlns:rdfs2="http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#rdfs:">\n    <owl:Ontology rdf:about="http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2"/>', 
        'metadata': {'uuid': '43674b56-c7de-44aa-9870-e5e6a7f6e06d', 'parent_source': 'rdf', 'parent_type': '知識本體'}}
    excepted_split_result0 = remove_uuids(excepted_split_result0)
    assert excepted_split_result0 == split_data[0]
    split_data[-1] = remove_uuids(split_data[-1])
    excepted_split_result_1 = {'entity': {'name': 'tcm_owl_0', 'description': 'tcm_owl_0', 'uuid': '0d9e9a69-5f92-42e1-a143-92ba476c3a1f', 'data_hash': '68d046c3fa4ab9bec0d7f740033dfd5d', 'relation': [{'uuid1': '0d9e9a69-5f92-42e1-a143-92ba476c3a1f', 'uuid2': '01ed9ce2-6bab-43a1-bccd-432298719331', 'relation': '屬於', 'properties': {'chunk_size': 1024}}], 'type': 'chunk'}, 'document': '<!-- Generated by the OWL API (version 4.5.9.2019-02-01T07:24:44Z) https://github.com/owlcs/owlapi -->', 'metadata': {'uuid': '0d9e9a69-5f92-42e1-a143-92ba476c3a1f', 'parent_source': 'rdf', 'parent_type': '知識本體'}}
    excepted_split_result_1 = remove_uuids(excepted_split_result_1)
    assert excepted_split_result_1 == split_data[-1]
    
# 關鍵字搜尋測試
@pytest.mark.asyncio
async def test_keyword_search():
    keyword = "血虛證類"
    search_type = "keyword"
    top_k = 3
    response = await call_api("v1/rdf/search", "get", params={"keyword":keyword, "search_type":search_type, "top_k":top_k})
    excepted_result ={
    "result": [
        "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#血虛證類 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2002/07/owl#Class",
        "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#血虛證類 http://www.w3.org/2000/01/rdf-schema#subClassOf http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#虛證門",
        "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#心脾血虛證型 http://www.w3.org/2000/01/rdf-schema#subClassOf http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#血虛證類"
    ]
    }
    assert response == excepted_result
    keyword = "血虛證"
    response = await call_api("v1/rdf/search", "get", params={"keyword":keyword, "search_type":search_type, "top_k":top_k})
    excepted_result = {
        "result": [
            "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#血虛證類 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2002/07/owl#Class",
            "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#肝腎血虛證型 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2002/07/owl#Class",
            "http://www.semanticweb.org/pllab/ontologies/2013/11/untitled-ontology-2#心肝血虛證型 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2002/07/owl#Class"
        ]
    }
    assert response == excepted_result
    
# 模糊搜尋測試
@pytest.mark.asyncio
async def test_fuzzy_search():
    keyword = "肝脾血證"
    search_type = "fuzzy"
    top_k = 3
    response = await call_api("v1/rdf/search", "get", params={"keyword":keyword, "search_type":search_type, "top_k":top_k})
    excepted_result = {"result": []}
    
# rag測試
@pytest.mark.asyncio
async def test_rag_api2():
    # response = await call_api("v1/rag/query", "post", {"source_list":["neo4j"], "type_list": [], "query":"血虛證類有哪些證型?"})
    # bot_message = (await call_api("v1/rag/reference_synthesis", "post", data=response))
    # assert "27711" not in response["answer_text"]
    # assert "參考筆記" not in bot_message["result"]
    # response = await call_api("v1/rag/query", "post", {"source_list":[], "type_list": ["摘錄"], "query":"FastAPI使用哪個port?"})
    # bot_message = (await call_api("v1/rag/reference_synthesis", "post", data=response))
    # assert "27711" not in response["answer_text"]
    # assert "參考筆記" not in bot_message["result"]
    # 跟其他RAG寫在一起
    pass
# 渲染測試
@pytest.mark.asyncio
async def test_reference_string():
    reference_string = (await call_api("/v1/rdf/reference_string", "post", data={"reference_data":{}}))["reference_string"]
    excepted_reference_string = ""
    assert excepted_reference_string == reference_string
